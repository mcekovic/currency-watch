package org.strangeforest.currencywatch.app;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import org.jfree.chart.*;
import org.strangeforest.currencywatch.core.*;
import org.strangeforest.currencywatch.ui.*;
import org.strangeforest.util.*;

import com.intellij.uiDesigner.core.*;

import static org.strangeforest.currencywatch.ui.UIUtil.*;

public class CurrencyChartForm {

	JPanel formPanel;
	private JPanel toolPanel;
	private JComboBox<CurrencySymbol> currencyComboBox;
	private JComboBox<Period> periodComboBox;
	private JComboBox<SeriesQuality> qualityComboBox;
	private JCheckBox bidAskCheckBox;
	private JCheckBox movAvgCheckBox;
	private JCheckBox bollingerBandsCheckBox;
	private JComboBox<Integer> movAvgPeriodComboBox;
	private JButton exitButton;
	private ChartPanel chartPanel;
	private JPanel statusPanel;
	private JLabel messageLabel;
	private JProgressBar progressBar;
	private JLabel statusLabel;
	private JLabel speedLabel;

	private final CurrencyRatePresenter presenter;

	public CurrencyChartForm(CurrencyRatePresenter presenter, final JFrame frame) {
		this.presenter = presenter;
		$$$setupUI$$$();
		presenter.addListener(new FormCurrencyRatePresenterListener());
		currencyComboBox.setModel(new DefaultComboBoxModel<>(CurrencySymbol.values()));
		currencyComboBox.setSelectedItem(DEFAULT_CURRENCY);
		currencyComboBox.addActionListener(new InputDataListener());
		periodComboBox.setModel(new DefaultComboBoxModel<>(Period.values()));
		periodComboBox.setSelectedItem(DEFAULT_PERIOD);
		periodComboBox.addActionListener(new InputDataListener());
		qualityComboBox.setModel(new DefaultComboBoxModel<>(SeriesQuality.values()));
		qualityComboBox.setSelectedItem(DEFAULT_QUALITY);
		qualityComboBox.addActionListener(new InputDataListener());
		bidAskCheckBox.addActionListener(new InputDataListener());
		movAvgCheckBox.addActionListener(new PeriodComboBoxEnabledInputDataListener());
		bollingerBandsCheckBox.addActionListener(new PeriodComboBoxEnabledInputDataListener());
		movAvgPeriodComboBox.setModel(new DefaultComboBoxModel<>(MOV_AVG_PERIODS));
		movAvgPeriodComboBox.setSelectedItem(DEFAULT_MOV_AVG_PERIOD);
		movAvgPeriodComboBox.addActionListener(new InputDataListener());
		exitButton.addActionListener(e -> frame.dispose());
		formPanel.addComponentListener(new ComponentAdapter() {
			@Override public void componentResized(ComponentEvent e) {
				resizeChartPanel();
			}
		});
	}

	private void createUIComponents() {
		chartPanel = new ChartPanel(presenter.getChart());
	}

	void inputDataChanged() {
		presenter.inputDataChanged(
			(CurrencySymbol)currencyComboBox.getSelectedItem(),
			(Period)periodComboBox.getSelectedItem(),
			(SeriesQuality)qualityComboBox.getSelectedItem(),
			bidAskCheckBox.isSelected(),
			movAvgCheckBox.isSelected(),
			bollingerBandsCheckBox.isSelected(),
			(Integer)movAvgPeriodComboBox.getSelectedItem()
		);
	}

	private void setMovAvgPeriodComboBoxEnabled() {
		movAvgPeriodComboBox.setEnabled(movAvgCheckBox.isSelected() || bollingerBandsCheckBox.isSelected());
	}

	private void resizeChartPanel() {
		Dimension size = new Dimension(
			formPanel.getWidth(),
			formPanel.getHeight() - toolPanel.getHeight() - statusPanel.getHeight() - 10
		);
		chartPanel.setSize(size);
		chartPanel.setPreferredSize(size);
		chartPanel.setMinimumSize(size);
		chartPanel.setMaximumSize(size);
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		formPanel = new JPanel();
		formPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		toolPanel = new JPanel();
		toolPanel.setLayout(new GridLayoutManager(1, 11, new Insets(1, 1, 1, 1), -1, -1));
		formPanel.add(toolPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		currencyComboBox = new JComboBox();
		currencyComboBox.setToolTipText("Currency");
		toolPanel.add(currencyComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Currency:");
		toolPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Period:");
		toolPanel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		periodComboBox = new JComboBox();
		periodComboBox.setToolTipText("Chart period");
		toolPanel.add(periodComboBox, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		qualityComboBox = new JComboBox();
		qualityComboBox.setToolTipText("Series quality");
		toolPanel.add(qualityComboBox, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Quality:");
		toolPanel.add(label3, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		movAvgPeriodComboBox = new JComboBox();
		movAvgPeriodComboBox.setEnabled(false);
		movAvgPeriodComboBox.setToolTipText("Moving average period");
		toolPanel.add(movAvgPeriodComboBox, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		movAvgCheckBox = new JCheckBox();
		movAvgCheckBox.setEnabled(true);
		movAvgCheckBox.setSelected(false);
		movAvgCheckBox.setText("Mov. Avg.:");
		movAvgCheckBox.setToolTipText("Show Moving Average");
		toolPanel.add(movAvgCheckBox, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		exitButton = new JButton();
		exitButton.setText("Exit");
		toolPanel.add(exitButton, new GridConstraints(0, 10, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bollingerBandsCheckBox = new JCheckBox();
		bollingerBandsCheckBox.setText("Boll. Bands:");
		bollingerBandsCheckBox.setToolTipText("Show Bollinger Bands");
		toolPanel.add(bollingerBandsCheckBox, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		bidAskCheckBox = new JCheckBox();
		bidAskCheckBox.setText("Bid/Ask");
		bidAskCheckBox.setToolTipText("Show Bid and Ask");
		toolPanel.add(bidAskCheckBox, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		chartPanel.setBackground(new Color(-2830136));
		chartPanel.setInitialDelay(200);
		chartPanel.setRefreshBuffer(true);
		chartPanel.setReshowDelay(200);
		formPanel.add(chartPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(1000, 600), null, 0, false));
		statusPanel = new JPanel();
		statusPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		formPanel.add(statusPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		progressBar = new JProgressBar();
		progressBar.setStringPainted(true);
		statusPanel.add(progressBar, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		statusLabel = new JLabel();
		statusLabel.setHorizontalAlignment(2);
		statusLabel.setHorizontalTextPosition(2);
		statusLabel.setText("Status");
		statusPanel.add(statusLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(80, -1), null, null, 0, false));
		messageLabel = new JLabel();
		messageLabel.setHorizontalAlignment(2);
		messageLabel.setHorizontalTextPosition(2);
		messageLabel.setText("");
		statusPanel.add(messageLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, -1), null, null, 0, false));
		speedLabel = new JLabel();
		speedLabel.setHorizontalAlignment(4);
		speedLabel.setHorizontalTextPosition(4);
		speedLabel.setText("0 rate/s");
		statusPanel.add(speedLabel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(60, -1), null, null, 0, false));
		label1.setLabelFor(currencyComboBox);
		label2.setLabelFor(periodComboBox);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return formPanel;
	}

	private class FormCurrencyRatePresenterListener implements CurrencyRatePresenterListener {
		@Override public void currentRate(CurrentRate currentRate) {
			RateValue rate = currentRate.getRate();
			messageLabel.setText(String.format("<html>&nbsp;%1$td-%1$tm-%1$tY: Bid %2$.2f, Middle <span style='color: %5$s;'>%3$.2f</span>, Ask %4$.2f</html>", currentRate.getDate(), rate.getBid(), rate.getMiddle(), rate.getAsk(), currentRate.getColor()));
		}
		@Override public void statusChanged(String status, boolean isError) {
			statusLabel.setText(StringUtil.maxLength(status, 25));
			statusLabel.setForeground(isError ? Color.RED : Color.BLACK);
		}
		@Override public void progressChanged(int progress) {
			progressBar.setValue(progress);
		}
		@Override public void ratesPerSecChanged(double ratesPerSec) {
			speedLabel.setText(ratesPerSec > 0.0 ? String.format("%8.1f", ratesPerSec) + " rate/s" : StringUtil.EMPTY);
		}
	}

	private class InputDataListener implements ActionListener {
		@Override public void actionPerformed(ActionEvent e) {
			inputDataChanged();
		}
	}

	private class PeriodComboBoxEnabledInputDataListener implements ActionListener {
		@Override public void actionPerformed(ActionEvent e) {
			setMovAvgPeriodComboBoxEnabled();
			inputDataChanged();
		}
	}
}
